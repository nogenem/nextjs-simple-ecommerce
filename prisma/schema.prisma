// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum AttributeType {
  Color
  Size
}

enum CurrencyCode {
  USD
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id               String    @id @default(cuid())
  slug             String    @unique
  name             String    @db.Text
  description      String    @default("") @db.Text
  description_html String    @default("") @db.Text
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now()) @updatedAt
  variants         Variant[]
  category         Category  @relation(fields: [categoryId], references: [id])
  categoryId       String
  discount         Discount? @relation(fields: [discountId], references: [id])
  discountId       String?

  @@index([categoryId])
  @@index([discountId])
}

model Variant {
  id                 String         @id @default(cuid())
  price              Int
  currency_code      CurrencyCode   @default(USD)
  sku                String
  quantity_in_stock  Int
  available_for_sale Boolean        @default(true)
  sold_amount        Int            @default(0)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @default(now()) @updatedAt
  attributes         Attribute[]
  images             VariantImage[]
  product            Product        @relation(fields: [productId], references: [id])
  productId          String
  CartItem           CartItem[]

  @@index([productId])
}

model Category {
  id         String    @id @default(cuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  products   Product[]
}

model Discount {
  id          String    @id @default(cuid())
  percent     Int
  valid_until DateTime
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  products    Product[]
}

model Attribute {
  id         String        @id @default(cuid())
  type       AttributeType
  name       String
  value      String
  created_at DateTime      @default(now())
  updated_at DateTime      @default(now()) @updatedAt
  variants   Variant[]
}

model VariantImage {
  id               String    @id @default(cuid())
  alternative_text String
  url              String    @db.Text
  variant          Variant[]
}

model Cart {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @unique
  items      CartItem[]

  @@index([userId])
}

model CartItem {
  id         String   @id @default(cuid())
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  variant    Variant  @relation(fields: [variantId], references: [id])
  variantId  String
  cart       Cart?    @relation(fields: [cartId], references: [id])
  cartId     String?

  @@unique([cartId, variantId])
  @@index([variantId])
  @@index([cartId])
}
